// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Credentials {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  password         String
  passwordSalt     String
  verificationCode Int?
  isActivated      Boolean      @default(false)
  User             User?
  UserIpList       UserIpList[]
  Token            Token[]
  role             Role?        @relation(fields: [roleId], references: [id])
  roleId           Int?
}

model User {
  id            Int          @id @default(autoincrement())
  firstName     String
  lastName      String
  lastOnlineAt  DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bio           String?
  Sender        Friendship[] @relation("sender")
  Recipient     Friendship[] @relation("recipient")
  credentials   Credentials? @relation(fields: [relatedCredId], references: [id])
  relatedCredId Int?         @unique
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  RoleRights  RoleRights[]
  Credentials Credentials[]
}

model Rights {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  RoleRights RoleRights[]
}

model RoleRights {
  id       Int    @id @default(autoincrement())
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   Int
  rights   Rights @relation(fields: [rightsId], references: [id])
  rightsId Int
}

model Token {
  id            Int         @id @default(autoincrement())
  refreshToken  String      @unique
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId Int         @unique
}

model UserIpList {
  id            Int          @id @default(autoincrement())
  ip            String
  Credentials   Credentials? @relation(fields: [credentialsId], references: [id])
  credentialsId Int?
}

model FriendshipStatuses {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Friendship Friendship[]
}

model Friendship {
  id                 Int                @id @default(autoincrement())
  firstUser          User               @relation("sender", fields: [firstUserId], references: [id])
  firstUserId        Int
  secondUser         User               @relation("recipient", fields: [secondUserId], references: [id])
  secondUserId       Int
  friendshipStatusId Int
  friendshipStatus   FriendshipStatuses @relation(fields: [friendshipStatusId], references: [id])
}
